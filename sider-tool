#!/usr/bin/env python3
# -*- python -*-
#
# Copyright 2019 by Chris Osborn <fozztexx@fozztexx.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import argparse
import struct
import os
import tempfile
import shutil

TRACKBYTES = 32 * 256
SDOSBYTES = 140 * 1024
LDOSBYTES = 400 * 1024

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("image", help="disk image from sider")
  parser.add_argument("--extract", nargs="?", const=False,
                      help="extract a disk partition/volume")
  parser.add_argument("--update",
                      help="update a disk partition/volume with specified disk image")
  parser.add_argument("--resize", type=int,
                      help="resize a disk partition/volume to the specified byte size")
  parser.add_argument("--volume", help="ID of partition/volume to work with")
  parser.add_argument("--printblock", action="store_true", help="print sider parameter block")
  return parser

def sizeof_fmt(num, suffix='B'):
  for unit in ['','k','M','G','T','P','E','Z']:
    if abs(num) < 1024.0:
      return "%3.1f%s%s" % (num, unit, suffix)
    num /= 1024.0
  return "%.1f%s%s" % (num, 'Yi', suffix)
  
class Sider:
  def __init__(self, path):
    self.path = path
    self.blocksize = 512
    blk1 = self.readBlock(0)
    blk2 = self.readBlock(1)
    if len(blk2) == 0 or (sum(blk1[256:]) != 0 and sum(blk2[256:]) != 0):
      self.blocksize = 256
    self.parmBlock = Sider.ParameterBlock(self.readBlock(1)[:256])
    return

  def readBlock(self, offset):
    f = open(self.path, "rb")
    f.seek(offset * self.blocksize)
    blk = f.read(self.blocksize)
    f.close()
    return blk

  def writeBlock(self, offset, block):
    f = open(self.path, "rb+")
    f.seek(offset * self.blocksize)
    f.write(block)
    f.close()
    return
  
  def partitionInfo(self, vos, vnum):
    if vos == "prodos":
      if vnum < 0 or vnum > 1:
        print("Invalid ProDOS volume ID. Must be 0 or 1")
        exit(1)
      offset = self.parmBlock.prodosOffset(vnum)
      length = self.parmBlock.prodosLength(vnum)
    elif vos == "dos":
      maxv = self.dict['dosVolumes']
      if vnum < 0 or vnum > maxv:
        print("Invalid DOS volume ID. Must be 0-%i" % (maxv))
        exit(1)
      offset = self.parmBlock.dosOffset(vnum)
      length = self.parmBlock.dosLength(vnum)
    elif vos == "pascal":
      if vnum < 0 or vnum > 3:
        print("Invalid Pascal volume ID. Must be 0-3")
        exit(1)
      offset = self.parmBlock.pascalOffset(vnum)
      length = self.parmBlock.pascalLength(vnum)
    elif vos == "cpm":
      if vnum < 0 or vnum > 3:
        print("Invalid CP/M volume ID. Must be 0-3")
        exit(1)
      offset = self.parmBlock.cpmOffset(vnum)
      length = self.parmBlock.cpmLength(vnum)
    else:
      print("Unknown partition")
      return None
    return offset, length
  
  def getVolume(self, vid):
    vparms = vid.split(":")
    if len(vparms) != 2:
      print("Invalid volume ID. Volume ID should be ostype:pnum")
      print("Valid ostypes are: prodos dos pascal cpm")
      return None

    vos = vparms[0].lower()
    vnum = int(vparms[1])
    offset, length = self.partitionInfo(vos, vnum)

    vol = []
    offset = int(offset / 256)
    length = int(length / 256)
    for idx in range(length):
      blk = self.readBlock(offset + idx)
      blk = blk[:256]
      vol.extend(blk)
    return vol

  def updateVolume(self, vid, vol):
    vparms = vid.split(":")
    if len(vparms) != 2:
      print("Invalid volume ID. Volume ID should be ostype:pnum")
      return False
    vos = vparms[0].lower()
    vnum = int(vparms[1])
    offset, length = self.partitionInfo(vos, vnum)
    offset = int(offset / 256)
    length = int(length / 256)
    for idx in range(length):
      block = vol[idx * 256:(idx + 1) * 256]
      self.writeBlock(offset + idx, block)
    return True

  def resizeVolume(self, vid, size):
    vparms = vid.split(":")
    if len(vparms) != 2:
      print("Invalid volume ID. Volume ID should be ostype:pnum")
      return False
    vos = vparms[0].lower()
    if vos == "dos":
      print("Cannot resize DOS partitions")
      return False
    vnum = int(vparms[1])
    offset, length = self.partitionInfo(vos, vnum)
    offset = int(offset / 256)
    length = int(length / 256)
    # Make sure length is a multiple of TRACKBYTES because some
    # partitions are aligned on tracks
    newLength = int((size + TRACKBYTES - 1) / TRACKBYTES) * TRACKBYTES
    newLength = int(newLength / 256)
    tempfd, temppath = tempfile.mkstemp(dir=os.path.dirname(self.path))
    os.close(tempfd)
    cmd = "dd if=\"%s\" of=\"%s\" bs=%i count=%i" \
        % (self.path, temppath, self.blocksize, offset)
    print(cmd)
    os.system(cmd)
    cmd = "dd if=/dev/zero of=\"%s\" bs=%i seek=%i count=%i" \
        % (temppath, self.blocksize, offset, newLength)
    print(cmd)
    os.system(cmd)
    cmd = "dd if=\"%s\" of=\"%s\" bs=%s seek=%i skip=%i" \
        % (self.path, temppath, self.blocksize, offset + newLength, offset + length)
    print(cmd)
    os.system(cmd)
    ptable = self.parmBlock.partitionTable()
    # Set actual length to multiple of sector
    ptable[vid]['length'] = int((size + 255) / 256) * 256
    self.parmBlock.printDict(ptable)
    for key in ptable:
      part = ptable[key]
      if part['offset'] > offset * 256:
        part['offset'] = part['offset'] + newLength * 256 - length * 256
    self.parmBlock.printDict(ptable)
    self.parmBlock.setPartitionTable(ptable)
    self.parmBlock.setTotalSize(self.parmBlock.totalSize() + newLength * 256 - length * 256)
    os.remove(self.path)
    shutil.move(temppath, self.path)
    self.parmBlock.packBlock()
    self.writeBlock(1, self.parmBlock.block)
    return
  
  class ParameterBlock:
    sformat = "< BBB 1s B 19s BHBHHBB 7s 5sH6sH 5sH6sH BB 7s BHH 15s 8s8s8s 6s" \
        " 5sH6sH 5sH6sH BB 1s HHBHHBBHH 77s B"
    keys = ["dosSmallVolumes", "smallVolumesXor", "interleave", "reserved", "dosVolumes",
                 "reserved2", "xor3233", "cylinders", "heads", "reducedWriteCylinders",
                 "precompCylinders", "maxECCDataBurst", "controlByte", "reserved3", "cpmA",
                 "cpmAsize", "cpmA2", "cpmAstart", "cpmB", "cpmBsize", "cpmB2", "cpmBstart",
                 "cpmVol1online", "cpmVol2online", "reserved7", "pascalUnit1", "pascal1Start",
                 "pascal2Start", "reserved8", "installDate", "modifiedDate", "lastBackupDate",
                 "reserved9", "cpmC", "cpmCsize", "cpmC2", "cpmCstart", "cpmD", "cpmDsize",
                 "cpmD2", "cpmDstart", "cpmVol3online", "cpmVol4online", "reserved13",
                 "prodos1Start", "prodos1Size", "prodosVol1Status", "prodos2Start",
                 "prodos2Size", "prodosVol2Status", "pascalUnit2", "pascal3Start",
                 "pascal4Start", "reserved16", "altTracksAvail"]
    def __init__(self, block):
      self.block = block
      values = struct.unpack(self.sformat, self.block)
      self.dict = dict(zip(self.keys, values))
      self.dict['cylinders'] = self.swap16(self.dict['cylinders'])
      self.dict['reducedWriteCylinders'] = self.swap16(self.dict['reducedWriteCylinders'])
      self.dict['precompCylinders'] = self.swap16(self.dict['precompCylinders'])
      return

    def packBlock(self):
      values = []
      for key in self.keys:
        val = self.dict[key]
        if key == 'cylinders' or key =='reducedWriteCylinders' or key == 'precompCylinders':
          val = self.swap16(val)
        values.append(val)
      block = struct.pack(self.sformat, *values)
      self.block = block
        
    def swap16(self, val):
      val = ((val & 0xFF) << 8) | ((val & 0xFF00) >> 8)
      return val
    
    def printDict(self, d):
      labels = list(d.keys())
      col_width = max(len(word) for word in labels) + 2
      for row in labels:
        print((row + ":").ljust(col_width), d[row])
      return
      
    def printBlock(self):
      d = {}
      for key in self.keys:
        if not key.startswith("reserved"):
          d[key] = self.dict[key]
      self.printDict(d)
      return

    def printPartitions(self):
      d = {}
      tpart = 0
      d['Small DOS'] = self.dict['dosSmallVolumes']
      d['Large DOS'] = self.dict['dosVolumes'] - self.dict['dosSmallVolumes']
      tpart += d['Small DOS'] * SDOSBYTES
      tpart += d['Large DOS'] * LDOSBYTES
      for i in range(2):
        key = "ProDOS %i" % (i + 1)
        size = self.prodosLength(i)
        tpart += size
        d[key] = "Size %s" % (sizeof_fmt(size))
      for i in range(4):
        key = "Pascal %i" % (i + 1)
        size = self.pascalLength(i)
        tpart += size
        d[key] = "Size %s" % (sizeof_fmt(size))
      for i in range(4):
        key = "CP/M %i" % (i + 1)
        size = self.cpmLength(i)
        tpart += size
        d[key] = "Size %s" % (sizeof_fmt(size))
      d['Sider size'] = sizeof_fmt(self.totalSize())
      d['Partition size total'] = sizeof_fmt(tpart)
      self.printDict(d)
      # print()
      # d = {}
      # for i in range(self.dict['dosVolumes']):
      #   key = "DOS %i" % (i)
      #   s = self.dosOffset(i)
      #   e = self.dosLength(i)
      #   d[key] = "%07x-%07x" % (s, s+e-1)
      # for i in range(4):
      #   key = "CP/M %i" % (i)
      #   s = self.cpmOffset(i)
      #   e = self.cpmLength(i)
      #   d[key] = "%07x-%07x" % (s, s+e-1)
      # for i in range(2):
      #   key = "ProDOS %i" % (i)
      #   s = self.prodosOffset(i)
      #   e = self.prodosLength(i)
      #   d[key] = "%07x-%07x" % (s, s+e-1)
      # for i in range(4):
      #   key = "Pascal %i" % (i)
      #   s = self.pascalOffset(i)
      #   e = self.pascalLength(i)
      #   d[key] = "%07x-%07x" % (s, s+e-1)
      # self.printDict(d)
      return

    def partitionTable(self):
      d = {}
      for i in range(4):
        key = "cpm:%i" % (i)
        s = self.cpmOffset(i)
        e = self.cpmLength(i)
        d[key] = {'offset': s, 'length': e}
      for i in range(2):
        key = "prodos:%i" % (i)
        s = self.prodosOffset(i)
        e = self.prodosLength(i)
        d[key] = {'offset': s, 'length': e}
      for i in range(4):
        key = "pascal:%i" % (i)
        s = self.pascalOffset(i)
        e = self.pascalLength(i)
        d[key] = {'offset': s, 'length': e}
      return d
      
    def setPartitionTable(self, d):
      for i in range(4):
        key = "cpm:%i" % (i)
        self.setCPMOffset(i, d[key]['offset'])
        self.setCPMLength(i, d[key]['length'])
      for i in range(2):
        key = "prodos:%i" % (i)
        self.setProdosOffset(i, d[key]['offset'])
        self.setProdosLength(i, d[key]['length'])
      for i in range(4):
        key = "pascal:%i" % (i)
        self.setPascalOffset(i, d[key]['offset'])
      return d
      
    # ProDOS offset is stored as track number
    def prodosOffset(self, vnum):
      key = "prodos%iStart" % (vnum + 1)
      val = self.dict[key]
      return val * TRACKBYTES

    def setProdosOffset(self, vnum, val):
      key = "prodos%iStart" % (vnum + 1)
      self.dict[key] = int(val / TRACKBYTES)
      return

    # ProDOS Length is stored as number of ProDOS 512 byte blocks, not 256 byte sectors
    def prodosLength(self, vnum):
      key = "prodos%iSize" % (vnum + 1)
      val = self.dict[key]
      return val * 512

    def setProdosLength(self, vnum, val):
      key = "prodos%iSize" % (vnum + 1)
      self.dict[key] = int(val / 512)
      return

    def dosOffset(self, vnum):
      sv = self.dict['dosSmallVolumes']
      tv = self.dict['dosVolumes']
      if vnum < 0 or vnum >= tv:
        print("Invalid DOS id. Must be from 0 to %i" % (tv - 1))
        return None
      offset = 1024 * 256
      snum = vnum
      if snum >= sv:
        snum = sv
      offset += snum * SDOSBYTES
      if vnum >= sv:
        offset += (vnum - sv) * LDOSBYTES
      return offset

    def dosLength(self, vnum):
      sv = self.dict['dosSmallVolumes']
      tv = self.dict['dosVolumes']
      if vnum < 0 or vnum >= tv:
        print("Invalid DOS id. Must be from 0 to %i" % (tv - 1))
        return None
      if vnum < sv:
        return SDOSBYTES
      return LDOSBYTES

    def pascalOffset(self, vnum):
      key = "pascal%iStart" % (vnum + 1)
      val = self.dict[key]
      return val * TRACKBYTES

    def setPascalOffset(self, vnum, val):
      key = "pascal%iStart" % (vnum + 1)
      self.dict[key] = int(val / TRACKBYTES)
      return

    def pascalLength(self, vnum):
      offset = self.pascalOffset(vnum)
      if vnum < 3:
        offset2 = self.pascalOffset(vnum + 1)
      else:
        offset2 = self.totalSize()
      return (offset2 - offset)

    def cpmOffset(self, vnum):
      key = "cpm%cstart" % (chr(vnum + 65))
      val = self.dict[key] * TRACKBYTES
      return val
      
    def setCPMOffset(self, vnum, val):
      key = "cpm%cstart" % (chr(vnum + 65))
      self.dict[key] = int(val / TRACKBYTES)
      return

    def cpmLength(self, vnum):
      key = "cpm%csize" % (chr(vnum + 65))
      val = int(self.dict[key] * TRACKBYTES / 4)
      return val
      
    def setCPMLength(self, vnum, val):
      key = "cpm%csize" % (chr(vnum + 65))
      self.dict[key] = int((val * 4) / TRACKBYTES)
      return

    def totalSize(self):
      val = self.dict['cylinders'] * self.dict['heads'] * TRACKBYTES
      return val

    def setTotalSize(self, val):
      self.dict['cylinders'] = int((val / TRACKBYTES) / self.dict['heads'])
      return
    
def main():
  args = build_argparser().parse_args()

  if not os.path.exists(args.image):
    print("No such image \"%s\"" % (args.image))
    exit(1)
    
  image = Sider(args.image)
  if args.extract != None:
    if not args.volume:
      print("Must specify volume to extract")
      exit(1)
    vol = image.getVolume(args.volume)
    if args.extract:
      path = args.extract
    else:
      path, ext = os.path.splitext(args.image)
      path += "-" + args.volume.replace(":", "-") + ext
    f = open(path, "wb")
    f.write(bytes(vol))
    f.close()
    print("Wrote %i bytes to %s" % (len(vol), path))
  elif args.update != None:
    with open(args.update, mode='rb') as f:
      vol = f.read()
    image.updateVolume(args.volume, vol)
    print("Updated %s" % args.volume)
  elif args.resize != None:
    image.resizeVolume(args.volume, args.resize)
    print("Resized %s" % args.volume)
  elif args.printblock:
    print(image.parmBlock.printBlock())
  else:
    print(image.parmBlock.printPartitions())
  return

if __name__ == '__main__':
  exit(main() or 0)
